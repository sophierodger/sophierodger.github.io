---
title: "Spotify Artists"
author: "Sophia Rodger"
date: "2023-10-30"
image: "spotify.png"

execute:
  message: false
  warning: false
  
toc: true
from: markdown+emoji
---

```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)

theme_set(theme_ipsum()+
          theme(strip.background =element_rect(fill="pink"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.33),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.33),
                               margin = margin(0,10,0,0))
                )
          )
```

Let's analyze the data for 'Spotify' :saxophone:

```{r}
library(tidyverse)
library(skimr)
spotify_all <- read_csv('https://bcdanl.github.io/data/spotify_all.csv')
# The data.frame `spotify_all` includes information about Spotify users' playlists
```

```{r}
# Answer for Q1a
top_songs <- spotify_all %>%
  group_by(artist_name, track_name) %>%
  summarize(popularity = n()) %>%
  arrange(desc(popularity)) %>%
  head(10)
top_songs


# This code finds the ten most popular songs and their artists, with the artists
# being, Drake, Kendrick Lamar, The Chainsmokers, DRAM, Post Malone, Migos, KYLE, 
# Lil Uzi Vert, Amine, Khalid respectively.
```

```{r}
top_artists <- spotify_all %>%
  group_by(artist_name) %>%
  summarize(popularity = n()) %>%
  arrange(desc(popularity)) %>%
  head(5)
top_artists

# This code finds the five most popular artists which are Drake, Kanye West, 
# Kendrick Lamar, Rihanna, and The Weekend.

most_popular_songs <- spotify_all %>%
  filter(artist_name %in% top_artists$artist_name) %>%
  group_by(artist_name, track_name) %>%
  summarize(popularity = n()) %>%
  arrange(artist_name, desc(popularity)) %>%
  group_by(artist_name) %>%
  slice(1)
most_popular_songs

# This finds the most popular song for each of the five most popular artists
# which is One Dance, Gold Digger, HUMBLE., Needed Me, and Starboy respectively.

```

```{r}
ggplot(top_songs, aes(x = artist_name, y = popularity, fill = artist_name)) +
  geom_bar(stat = "identity") +
  labs(title = "Popularity of the Ten Most Popular Artists",
       x = "Artist Name", y = "Popularity") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# This code create a ggplot to visualize the relationship between 'pos' and the ten 
# most popular artists, showing that Drake has the highest popularity, while Khalid
# has the lowest popularity. The bar chart shows that all of the artists have a 
# popularity above 100.

```

```{r}
# -   `pid`: playlist id
# -   `playlist_name`: name of playlist
# -   `artist`: name of the track's primary artist, which appears only once within a playlist
# -   `n_artist`: number of occurrences of artist within a playlist

# Answer for Q1d

pid_artist_df <- spotify_all %>% 
  group_by(pid, playlist_name, artist_name) %>% 
  summarise(n_artist = n_distinct(artist_name))

# This creates a data frame with pid-artist level of observations
```

# Q1e

```{r}
top10_artists <- spotify_all %>%
  group_by(artist_name) %>%
  summarise(total_duration = sum(duration_ms)) %>%
  top_n(10, total_duration)

ggplot(top10_artists, aes(x = reorder(artist_name, total_duration), y = total_duration)) +
  geom_point(stat = "identity", fill = "green") +
  labs(title = "Top 10 Artists by Total Duration",
       x = "Artist Name",
       y = "Total Duration (ms)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))

```

# Q1f

```{r}
top_20_albums <- spotify_all %>%
  count(album_name, sort = TRUE) %>%
  head(20)

ggplot(top_20_albums, aes(x = reorder(album_name, n), y = n)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Top 20 Albums by Count",
       x = "Album Name",
       y = "Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# This bar plot shows the top 20 albums based on
# the count of tracks in the dataset. The x-axis 
# represents the album names, and the y-axis 
# represents the count of tracks from each album.
```
