[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL Project",
    "section": "",
    "text": "About this project 👏\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "project.html#summary-statistics",
    "href": "project.html#summary-statistics",
    "title": "DANL Project",
    "section": "2.1 Summary Statistics",
    "text": "2.1 Summary Statistics\n\nmpg &lt;- ggplot2::mpg\n\n\n\n\n  \n\n\n\nskim(mpg) %&gt;% \n  select(-n_missing)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\nskim_variable\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n1\n4\n10\n0\n15\n0\n\n\nmodel\n1\n2\n22\n0\n38\n0\n\n\ntrans\n1\n8\n10\n0\n10\n0\n\n\ndrv\n1\n1\n1\n0\n3\n0\n\n\nfl\n1\n1\n1\n0\n5\n0\n\n\nclass\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n▇▆▆▃▁\n\n\nyear\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n▇▁▁▁▇\n\n\ncyl\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n▇▁▇▁▇\n\n\ncty\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n▆▇▃▁▁\n\n\nhwy\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n▅▅▇▁▁"
  },
  {
    "objectID": "project.html#mpg-and-a-type-of-cars",
    "href": "project.html#mpg-and-a-type-of-cars",
    "title": "DANL Project",
    "section": "2.2 MPG and a Type of Cars",
    "text": "2.2 MPG and a Type of Cars\nThe following boxplot shows how the distribution of highway MPG (hwy) varies by a type of cars (class) 🚙 🚚 🚐.\n\nggplot(data = mpg) +\n  geom_boxplot(aes(x = class, y = hwy, fill = class),\n               show.legend = F) +\n  labs(x = \"Class\", y = \"Highway\\nMPG\")"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Informative Analytical Solutions",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\ncategories: [news]\n\n\n\n\n\n\n\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nThis code finds the top 5 markets in terms of total beer_floz for each beer brand\n\n\n\n\n\n\n\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nThe data.frame spotify_all includes information about Spotify users’ playlists\n\n\n\n\n\n\n\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nSophia Rodger\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/spotify/spotifyhw.html",
    "href": "posts/spotify/spotifyhw.html",
    "title": "Sophia Rodger",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\nspotify_all &lt;- read_csv('https://bcdanl.github.io/data/spotify_all.csv')\n\nRows: 198005 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): playlist_name, artist_name, track_name, album_name\ndbl (3): pid, pos, duration_ms\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# The data.frame `spotify_all` includes information about Spotify users' playlists\n\n\n# Answer for Q1a\ntop_songs &lt;- spotify_all %&gt;%\n  group_by(artist_name, track_name) %&gt;%\n  summarize(popularity = n()) %&gt;%\n  arrange(desc(popularity)) %&gt;%\n  head(10)\n\n`summarise()` has grouped output by 'artist_name'. You can override using the\n`.groups` argument.\n\ntop_songs\n\n# A tibble: 10 × 3\n# Groups:   artist_name [10]\n   artist_name      track_name                          popularity\n   &lt;chr&gt;            &lt;chr&gt;                                    &lt;int&gt;\n 1 Drake            One Dance                                  143\n 2 Kendrick Lamar   HUMBLE.                                    142\n 3 The Chainsmokers Closer                                     129\n 4 DRAM             Broccoli (feat. Lil Yachty)                127\n 5 Post Malone      Congratulations                            119\n 6 Migos            Bad and Boujee (feat. Lil Uzi Vert)        117\n 7 KYLE             iSpy (feat. Lil Yachty)                    115\n 8 Lil Uzi Vert     XO TOUR Llif3                              113\n 9 Aminé            Caroline                                   107\n10 Khalid           Location                                   102\n\n# This code finds the ten most popular songs and their artists, with the artists\n# being, Drake, Kendrick Lamar, The Chainsmokers, DRAM, Post Malone, Migos, KYLE, \n# Lil Uzi Vert, Amine, Khalid respectively.\n\n\ntop_artists &lt;- spotify_all %&gt;%\n  group_by(artist_name) %&gt;%\n  summarize(popularity = n()) %&gt;%\n  arrange(desc(popularity)) %&gt;%\n  head(5)\ntop_artists\n\n# A tibble: 5 × 2\n  artist_name    popularity\n  &lt;chr&gt;               &lt;int&gt;\n1 Drake                2715\n2 Kanye West           1065\n3 Kendrick Lamar       1035\n4 Rihanna               915\n5 The Weeknd            913\n\n# This code finds the five most popular artists which are Drake, Kanye West, \n# Kendrick Lamar, Rihanna, and The Weekend.\n\nmost_popular_songs &lt;- spotify_all %&gt;%\n  filter(artist_name %in% top_artists$artist_name) %&gt;%\n  group_by(artist_name, track_name) %&gt;%\n  summarize(popularity = n()) %&gt;%\n  arrange(artist_name, desc(popularity)) %&gt;%\n  group_by(artist_name) %&gt;%\n  slice(1)\n\n`summarise()` has grouped output by 'artist_name'. You can override using the\n`.groups` argument.\n\nmost_popular_songs\n\n# A tibble: 5 × 3\n# Groups:   artist_name [5]\n  artist_name    track_name  popularity\n  &lt;chr&gt;          &lt;chr&gt;            &lt;int&gt;\n1 Drake          One Dance          143\n2 Kanye West     Gold Digger         83\n3 Kendrick Lamar HUMBLE.            142\n4 Rihanna        Needed Me           79\n5 The Weeknd     Starboy            100\n\n# This finds the most popular song for each of the five most popular artists\n# which is One Dance, Gold Digger, HUMBLE., Needed Me, and Starboy respectively.\n\n\nggplot(top_songs, aes(x = artist_name, y = popularity, fill = artist_name)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Popularity of the Ten Most Popular Artists\",\n       x = \"Artist Name\", y = \"Popularity\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n# This code create a ggplot to visualize the relationship between 'pos' and the ten \n# most popular artists, showing that Drake has the highest popularity, while Khalid\n# has the lowest popularity. The bar chart shows that all of the artists have a \n# popularity above 100.\n\n\n# -   `pid`: playlist id\n# -   `playlist_name`: name of playlist\n# -   `artist`: name of the track's primary artist, which appears only once within a playlist\n# -   `n_artist`: number of occurrences of artist within a playlist\n\n# Answer for Q1d\n\npid_artist_df &lt;- spotify_all %&gt;% \n  group_by(pid, playlist_name, artist_name) %&gt;% \n  summarise(n_artist = n_distinct(artist_name))\n\n`summarise()` has grouped output by 'pid', 'playlist_name'. You can override\nusing the `.groups` argument.\n\n# This creates a data frame with pid-artist level of observations"
  },
  {
    "objectID": "posts/beer markets/beermarketHW.html",
    "href": "posts/beer markets/beermarketHW.html",
    "title": "Sophia Rodger",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\n\nbeer_mkts &lt;- read_csv('https://bcdanl.github.io/data/beer_markets.csv')\n\nRows: 73115 Columns: 24\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): _purchase_desc, brand, container, market, buyertype, income, age, ...\ndbl  (5): hh, quantity, dollar_spent, beer_floz, price_per_floz\nlgl  (6): promo, childrenUnder6, children6to17, microwave, dishwasher, singl...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ntop_markets &lt;- beer_mkts %&gt;%\n  group_by(brand, market) %&gt;%\n  summarize(total_floz = sum(beer_floz)) %&gt;%\n  arrange(brand, desc(total_floz)) %&gt;%\n  group_by(brand) %&gt;%\n  slice(1:5)\n\n`summarise()` has grouped output by 'brand'. You can override using the\n`.groups` argument.\n\ntop_markets\n\n# A tibble: 25 × 3\n# Groups:   brand [5]\n   brand       market      total_floz\n   &lt;chr&gt;       &lt;chr&gt;            &lt;dbl&gt;\n 1 BUD LIGHT   PHOENIX         271012\n 2 BUD LIGHT   TAMPA           171830\n 3 BUD LIGHT   MIAMI           152990\n 4 BUD LIGHT   ST. LOUIS       140982\n 5 BUD LIGHT   CHARLOTTE       136786\n 6 BUSCH LIGHT RURAL IOWA      184000\n 7 BUSCH LIGHT HOUSTON         154896\n 8 BUSCH LIGHT CHICAGO         118916\n 9 BUSCH LIGHT TAMPA           110680\n10 BUSCH LIGHT MINNEAPOLIS      92992\n# ℹ 15 more rows\n\n# This code finds the top 5 markets in terms of total beer_floz for each beer brand\n\n\nloyal_consumers &lt;- beer_mkts %&gt;%\n  group_by(hh, brand) %&gt;%\n  summarize(purchased = n()) %&gt;%\n  group_by(brand) %&gt;%\n  mutate(total_hh = n(),\n         fraction = sum(purchased == 1) / total_hh) %&gt;%\n  arrange(desc(fraction))\n\n`summarise()` has grouped output by 'hh'. You can override using the `.groups`\nargument.\n\nloyal_consumers\n\n# A tibble: 13,202 × 5\n# Groups:   brand [5]\n        hh brand       purchased total_hh fraction\n     &lt;dbl&gt; &lt;chr&gt;           &lt;int&gt;    &lt;int&gt;    &lt;dbl&gt;\n 1 2000417 COORS LIGHT         8     3045    0.529\n 2 2000711 COORS LIGHT        13     3045    0.529\n 3 2001521 COORS LIGHT         3     3045    0.529\n 4 2001825 COORS LIGHT         1     3045    0.529\n 5 2001871 COORS LIGHT         1     3045    0.529\n 6 2001947 COORS LIGHT         5     3045    0.529\n 7 2001978 COORS LIGHT         1     3045    0.529\n 8 2002617 COORS LIGHT        24     3045    0.529\n 9 2002856 COORS LIGHT         2     3045    0.529\n10 2003419 COORS LIGHT         2     3045    0.529\n# ℹ 13,192 more rows\n\n# This code calculates the fraction of households purchasing only each beer brand\n\nlargest_proportion_brand &lt;- loyal_consumers %&gt;%\n  arrange(desc(fraction)) %&gt;%\n  slice(1)\nlargest_proportion_brand\n\n# A tibble: 5 × 5\n# Groups:   brand [5]\n       hh brand         purchased total_hh fraction\n    &lt;dbl&gt; &lt;chr&gt;             &lt;int&gt;    &lt;int&gt;    &lt;dbl&gt;\n1 2000235 BUD LIGHT             1     4657    0.499\n2 2001531 BUSCH LIGHT           1     1110    0.457\n3 2000417 COORS LIGHT           8     3045    0.529\n4 2000946 MILLER LITE           1     3195    0.487\n5 2001715 NATURAL LIGHT         1     1195    0.403\n\n# This code finds the brand with the largest proportion of loyal consumers\n\n\nhousehold_stats &lt;- beer_mkts %&gt;%\n  group_by(hh) %&gt;%\n  summarize(num_transactions = n(),\n            proportion_bud_light = mean(brand == \"Bud Light\"),\n            proportion_busch_light = mean(brand == \"Busch Light\"),\n            proportion_coors_light = mean(brand == \"Coors Light\"),\n            proportion_miller_lite = mean(brand == \"Miller Lite\"),\n            proportion_natural_light = mean(brand == \"Natural Light\"))\nhousehold_stats\n\n# A tibble: 10,408 × 7\n        hh num_transactions proportion_bud_light proportion_busch_light\n     &lt;dbl&gt;            &lt;int&gt;                &lt;dbl&gt;                  &lt;dbl&gt;\n 1 2000235                1                    0                      0\n 2 2000417                8                    0                      0\n 3 2000711               13                    0                      0\n 4 2000946                2                    0                      0\n 5 2001521               11                    0                      0\n 6 2001531                1                    0                      0\n 7 2001581                5                    0                      0\n 8 2001582               13                    0                      0\n 9 2001618                1                    0                      0\n10 2001715                3                    0                      0\n# ℹ 10,398 more rows\n# ℹ 3 more variables: proportion_coors_light &lt;dbl&gt;,\n#   proportion_miller_lite &lt;dbl&gt;, proportion_natural_light &lt;dbl&gt;\n\n# This code calculates the number of beer transactions and proportion of each \n# beer brand choice for each household"
  },
  {
    "objectID": "posts/nfl/nflhw.html",
    "href": "posts/nfl/nflhw.html",
    "title": "Q2a",
    "section": "",
    "text": "—NFL in 2022” author: “Sophia Rodger” date: “2023-10-27” categories: [news]\n\n\nQ2a\n\nNFL2022_stuffs &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_stuffs.csv')\n\nRows: 50147 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): game_id, posteam\ndbl (8): play_id, drive, week, qtr, down, half_seconds_remaining, pass, wp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n NFL2022_stuffs &lt;- NFL2022_stuffs[complete.cases(NFL2022_stuffs$posteam), ]\n\n\n\nQ2b\n\n filtered_data &lt;- NFL2022_stuffs %&gt;%\n  filter(wp &gt; 0.2 & wp &lt; 0.75, down &lt;= 2, half_seconds_remaining &gt; 120)\n\n summary_pass &lt;- filtered_data %&gt;%\n  group_by(posteam) %&gt;%\n  summarize(mean_pass = mean(pass, na.rm = TRUE))\n\n\n\nQ2c\n\nlibrary(ggplot2)\n\n# Reordering posteam based on mean value of pass\n summary_pass$posteam &lt;- factor(summary_pass$posteam, levels =  summary_pass$posteam[order(summary_pass$mean_pass)])\n\n# Plotting\n ggplot(summary_pass, aes(x = mean_pass, y = posteam)) +\n  geom_point() +\n  labs(title = \"Mean Value of Pass for Each posteam\",\n       x = \"Percentage of pass plays\",\n       y = \"Team with possession\") +\n  theme_minimal()\n\n\n\n\n\n\nQ2d\n\nNFL2022_epa &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_epa.csv')\n\nRows: 46427 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): game_id, posteam, receiver, passer\ndbl (3): play_id, drive, epa\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nNFL2022_stuffs_EPA &lt;- NFL2022_stuffs %&gt;%\n  left_join(NFL2022_epa %&gt;% select(play_id, passer, receiver, epa), by = \"play_id\") %&gt;%\n  filter(!is.na(passer))\n\nWarning in left_join(., NFL2022_epa %&gt;% select(play_id, passer, receiver, : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 24 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\nQ2e\n\nweekly_trend &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(passer %in% c(\"J.Allen\", \"P.Mahomes\")) %&gt;%\n group_by(week, passer) %&gt;%\n  summarize(mean_epa = mean(epa, na.rm = TRUE))\n\n`summarise()` has grouped output by 'week'. You can override using the\n`.groups` argument.\n\n# Plotting\nggplot(weekly_trend, aes(x = week, y = mean_epa, color = passer)) +\n  geom_line() +\n  labs(title = \"NFL Weekly Trend of Mean EPA\",\n       x = \"Week\",\n       y = \"Mean EPA\") +\n theme_minimal()\n\n\n\n\n\n\nQ2f\n\nmean_epa_diff &lt;- weekly_trend %&gt;%\n  spread(passer, mean_epa) %&gt;%\n  mutate(diff_J_Allen_P_Mahomes = `J.Allen` - `P.Mahomes`)\n\n\n\nQ2g\n\npasser_summary &lt;- NFL2022_stuffs_EPA %&gt;%\n  group_by(posteam, passer) %&gt;%\n  summarize(mean_epa = mean(epa, na.rm = TRUE),\n            n_pass = n()) %&gt;%\n  filter(n_pass &gt;= quantile(n_pass, 0.75))\n\n`summarise()` has grouped output by 'posteam'. You can override using the\n`.groups` argument.\n\ntop_10_passers &lt;- passer_summary %&gt;%\n  group_by(passer) %&gt;%\n  summarize(mean_epa = mean(mean_epa, na.rm = TRUE)) %&gt;%\n  top_n(10, wt = mean_epa)"
  },
  {
    "objectID": "lecture11:29.html",
    "href": "lecture11:29.html",
    "title": "Habits",
    "section": "",
    "text": "Section 1\n\nsome bullet\n\nQuarto\nggplot\n\n\n\n\n\n\nggplot(gapminder) +\n  geom_point(aes(x = gdpPercap, y = lifeExp,\n                 color = continent), alpha = .25) +\n  labs(x = \"GDP per capita\",\n       y = \"Life Expectancy\",\n       color = \"Continent\") +\n  theme_economist()\n\n:smile:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sophia Rodger",
    "section": "",
    "text": "Sophia Rodger majors in Business Administration at SUNY Geneseo. When not working on data analytics, Sophia enjoys spending time hanging out with friends and family."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Sophia Rodger",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  Major in Finance | Aug 2022 - May 2026  Minor in Business Administration"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Sophia Rodger",
    "section": "Experience",
    "text": "Experience\nFood Truck Manager and Operator | Data Analyst Intern | May 2024 - Aug 2024"
  }
]